import cv2
import numpy as np
import matplotlib.pyplot as plt
import heapq
from collections import defaultdict
import math

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥–∞—Ü–∏—è—Ö —Å–µ—Ä–æ–≥–æ
image = cv2.imread("Grayscale_Cat.jpg", cv2.IMREAD_GRAYSCALE)

if image is None:
    raise FileNotFoundError("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å!")

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
plt.figure(figsize=(6,6))
plt.imshow(image, cmap='gray')
plt.title("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
plt.show()

# –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ç–µ–Ω–∫–æ–≤ —Å–µ—Ä–æ–≥–æ)
levels = 16  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 16 —É—Ä–æ–≤–Ω–µ–π –≤–º–µ—Å—Ç–æ 256
quantized_image = np.round(image / (256 / levels)) * (256 / levels)
quantized_image = quantized_image.astype(np.uint8)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
plt.figure(figsize=(6,6))
plt.imshow(quantized_image, cmap='gray')
plt.title(f"–ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ({levels} —É—Ä–æ–≤–Ω–µ–π)")
plt.show()

# –°—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–æ –∏ –ø–æ—Å–ª–µ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è
plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.hist(image.ravel(), bins=256, range=[0,256], color='blue', alpha=0.7)
plt.title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

plt.subplot(1,2,2)
plt.hist(quantized_image.ravel(), bins=levels, range=[0,256], color='red', alpha=0.7)
plt.title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
plt.show()

# ----------------------------- #
# 1. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–õ–ê–°–°–ê –£–ó–õ–ê –î–õ–Ø –î–ï–†–ï–í–ê –•–ê–§–§–ú–ê–ù–ê
# ----------------------------- #

class HuffmanNode:
    def __init__(self, value, freq):
        """
        –ö–ª–∞—Å—Å —É–∑–ª–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –•–∞—Ñ—Ñ–º–∞–Ω–∞.
        
        value - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—è (—É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–æ–≥–æ)
        freq - —á–∞—Å—Ç–æ—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        left, right - —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
        """
        self.value = value
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        # –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤ (–Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏)
        return self.freq < other.freq

# ----------------------------- #
# 2. –ü–û–°–¢–†–û–ï–ù–ò–ï –î–ï–†–ï–í–ê –•–ê–§–§–ú–ê–ù–ê
# ----------------------------- #

def build_huffman_tree(frequencies):
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –•–∞—Ñ—Ñ–º–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å (heap).
    """
    heap = [HuffmanNode(value, freq) for value, freq in frequencies.items()]
    heapq.heapify(heap)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫—É—á–∞)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –ø—É—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º–∏ —á–∞—Å—Ç–æ—Ç–∞–º–∏
    while len(heap) > 1:
        left = heapq.heappop(heap)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π (–Ω–∞–∏–º–µ–Ω–µ–µ —á–∞—Å—Ç—ã–π) —É–∑–µ–ª
        right = heapq.heappop(heap) # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π –Ω–∞–∏–º–µ–Ω–µ–µ —á–∞—Å—Ç—ã–π —É–∑–µ–ª
        merged = HuffmanNode(None, left.freq + right.freq)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)
        merged.left = left
        merged.right = right
        heapq.heappush(heap, merged)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —É–∑–µ–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫—É—á—É

    return heap[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–µ–Ω—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞

# ----------------------------- #
# 3. –ì–ï–ù–ï–†–ê–¶–ò–Ø –•–ê–§–§–ú–ê–ù-–ö–û–î–û–í
# ----------------------------- #

def generate_huffman_codes(node, prefix="", codebook={}):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–æ–≤ –•–∞—Ñ—Ñ–º–∞–Ω–∞.
    –ö–∞–∂–¥—ã–π –ª–µ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥ -> –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è "0", –ø—Ä–∞–≤—ã–π -> "1".
    """
    if node is not None:
        if node.value is not None:
            codebook[node.value] = prefix  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—è
        generate_huffman_codes(node.left, prefix + "0", codebook)
        generate_huffman_codes(node.right, prefix + "1", codebook)
    return codebook

# ----------------------------- #
# 4. –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –•–ê–§–§–ú–ê–ù-–ö–û–î–ò–†–û–í–ê–ù–ò–Ø –ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Æ
# ----------------------------- #

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è –≤ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
unique, counts = np.unique(quantized_image, return_counts=True)
frequencies = dict(zip(unique, counts))  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å {–ø–∏–∫—Å–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: —á–∞—Å—Ç–æ—Ç–∞}

# –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –•–∞—Ñ—Ñ–º–∞–Ω–∞
huffman_tree = build_huffman_tree(frequencies)

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥—ã –•–∞—Ñ—Ñ–º–∞–Ω–∞
huffman_codes = generate_huffman_codes(huffman_tree)

# –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
print("–ö–æ–¥—ã –•–∞—Ñ—Ñ–º–∞–Ω–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:")
for i, (value, code) in enumerate(huffman_codes.items()):
    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ {value}: {code}")
    if i == 10: break  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 10 –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

# ----------------------------- #
# 5. –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –°–ñ–ê–¢–ò–Ø (PSNR)
# ----------------------------- #

def compute_psnr(original, compressed):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å PSNR (Peak Signal-to-Noise Ratio),
    –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    –ß–µ–º –≤—ã—à–µ PSNR, —Ç–µ–º –º–µ–Ω—å—à–µ –ø–æ—Ç–µ—Ä—å –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏.
    """
    mse = np.mean((original - compressed) ** 2)  # –°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ (MSE)
    if mse == 0:
        return float('inf')  # –ï—Å–ª–∏ MSE = 0, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
    
    max_pixel = 255.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—è
    return 20 * math.log10(max_pixel / math.sqrt(mse))  # –§–æ—Ä–º—É–ª–∞ PSNR

# –í—ã—á–∏—Å–ª—è–µ–º PSNR –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
psnr_value = compute_psnr(image, quantized_image)
print(f"PSNR –ø–æ—Å–ª–µ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è: {psnr_value:.2f} –¥–ë")

# ----------------------------- #
# üéØ –ò—Ç–æ–≥:
# ‚úî –ú—ã —É–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ç–µ–Ω–∫–æ–≤ —Å–µ—Ä–æ–≥–æ (–∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ)
# ‚úî –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –•–∞—Ñ—Ñ–º–∞–Ω–∞
# ‚úî –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –∏ –æ—Ü–µ–Ω–∏–ª–∏ —Å–∂–∞—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é PSNR
# ‚úî –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ª—É—á–∏–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞!
# ----------------------------- #
